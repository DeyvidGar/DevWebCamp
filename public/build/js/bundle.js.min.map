{"version":3,"sources":["app.js","horas.js","tags.js"],"names":["alerta","document","querySelector","setTimeout","remove","busqueda","categoria_id","dia_id","dias","querySelectorAll","categoria","inputHiddenHoras","llenarBusqueda","e","target","name","value","Object","values","includes","async","url","resultadoConexion","fetch","eventos","idHorasDisponibles","map","evento","id","listadoHoras","listadoHorasArray","Array","from","filter","hora","dataset","horaId","forEach","habilitarLI","classList","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","seleccionada","li","add","dia","tagInput","divTags","inputHiddenTags","tags","split","mostrarTags","textContent","tag","listado","createElement","onclick","eliminarTag","nombre","appendChild","actulaizarInputHidden","toString","lastChild","keyCode","preventDefault","trim"],"mappings":"CAAA,WACA,MAAAA,EAAAC,SAAAC,cAAA,WACAF,GACAG,WAAA,KACAH,EAAAI,UACA,KALA,GCAA,WAEA,GADAH,SAAAC,cAAA,UACA,CAEA,IAAAG,EAAA,CAEAC,aAAA,GACAC,OAAA,IAGA,MAAAC,EAAAP,SAAAQ,iBAAA,mBACAC,EAAAT,SAAAC,cAAA,yBAEAS,EAAAV,SAAAC,cAAA,oBAIA,SAAAU,EAAAC,GACAR,EAAAQ,EAAAC,OAAAC,MAAAF,EAAAC,OAAAE,MAGAC,OAAAC,OAAAb,GAAAc,SAAA,KAIAC,iBACA,MAAAb,OAAAA,EAAAD,aAAAA,GAAAD,EACAgB,EAAA,+BAAAd,kBAAAD,IAEAgB,QAAAC,MAAAF,IAOA,SAAAG,GAEA,MAAAC,EAAAD,EAAAE,IAAAC,GAAAA,EAAAC,IACAC,EAAA5B,SAAAQ,iBAAA,aAEAqB,EAAAC,MAAAC,KAAAH,GAGAC,EAAAG,OAAAC,IAAAT,EAAAN,SAAAe,EAAAC,QAAAC,SACAC,QAAAC,GAAAA,EAAAC,UAAAnC,OAAA,8BAEAH,SAAAQ,iBAAA,6CACA4B,QAAAH,GAAAA,EAAAM,iBAAA,QAAAC,IAfAC,OAHApB,EAAAqB,QARAC,GA6BA,SAAAH,EAAA5B,GAEA,MAAAgC,EAAA5C,SAAAC,cAAA,8BACA2C,GAAAA,EAAAN,UAAAnC,OAAA,6BAGA,MAAA0C,EAAAjC,EAAAC,OACAgC,EAAAP,UAAAQ,IAAA,6BAEApC,EAAAK,MAAA8B,EAAAX,QAAAC,OA9CA1B,EAAA8B,iBAAA,SAAA5B,GACAJ,EAAA6B,QAAAW,GAAAA,EAAAR,iBAAA,SAAA5B,KAfA,GCAA,WACA,MAAAqC,EAAAhD,SAAAC,cAAA,eACA,GAAA+C,EAAA,CACA,MAAAC,EAAAjD,SAAAC,cAAA,SACAiD,EAAAlD,SAAAC,cAAA,iBAGA,IAAAkD,EADA,KAAAD,EAAAnC,MAAA,GAAAmC,EAAAnC,MAAAqC,MAAA,KAsBA,SAAAC,IACAJ,EAAAK,YAAA,GACAH,EAAAf,QAAAmB,IACA,MAAAC,EAAAxD,SAAAyD,cAAA,MACAD,EAAAlB,UAAAQ,IAAA,mBACAU,EAAAF,YAAA,IACAE,EAAAE,QAAAC,EACA,MAAAC,EAAA5D,SAAAyD,cAAA,QACAG,EAAAN,YAAAC,EACAC,EAAAK,YAAAD,GACAX,EAAAY,YAAAL,KAIA,SAAAM,IAEAZ,EAAAnC,MAAAoC,EAAAY,WAGA,SAAAJ,EAAA/C,GAEAA,EAAAC,OAAAV,SAEAgD,EAAAA,EAAAnB,OAAAuB,GAAAA,IAAA3C,EAAAC,OAAAmD,UAAAV,aACAQ,IACAT,IA7CAA,IAEAL,EAAAT,iBAAA,YACA,SAAA3B,GAEA,GAAA,KAAAA,EAAAqD,SAAA,KAAArD,EAAAqD,QAAA,CAIA,GAFArD,EAAAsD,iBAEA,KAAAtD,EAAAC,OAAAE,MAAAoD,QAAAvD,EAAAC,OAAAE,MAAA,EAAA,OAGAoC,EAAA,IAAAA,EAAAvC,EAAAC,OAAAE,MAAAoD,QAEAnB,EAAAjC,MAAA,GACAsC,IACAS,SAxBA","file":"bundle.js","sourcesContent":["(function(){\r\n    const alerta = document.querySelector('.alerta');\r\n    if(alerta){\r\n        setTimeout(() => {\r\n            alerta.remove();\r\n        }, 3000);\r\n    }\r\n})();","(function(){\r\n    const horas = document.querySelector('#horas');\r\n    if(horas){\r\n        //crear objeto en memoria para almacenar los objetos que queremos hacer interactivos\r\n        let busqueda = {\r\n            //el nombre debe ser el mismo que esta en el name del formulario\r\n            categoria_id: '',\r\n            dia_id: ''\r\n        }\r\n\r\n        const dias = document.querySelectorAll('[name=\"dia_id\"]');\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        // const inputHiddenDias = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHoras = document.querySelector('[name=\"hora_id\"]');\r\n        categoria.addEventListener('change', llenarBusqueda);\r\n        dias.forEach(dia => dia.addEventListener('change', llenarBusqueda));\r\n\r\n        function llenarBusqueda(e){\r\n            busqueda[e.target.name] = e.target.value;\r\n\r\n            // con Object.values obtenemos un arreglo con solo los valores del objeto, includes obtiene si alguno esta vacio\r\n            if(Object.values(busqueda).includes('')) return;\r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos() {\r\n            const { dia_id, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia_id}&categoria_id=${categoria_id}`;\r\n\r\n            const resultadoConexion = await fetch(url);\r\n            const eventos = await resultadoConexion.json();\r\n            // console.log(eventos);//eventos disponibles dependiendo los valores del objeto de busqueda\r\n\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            // obtener solo las horas que ya estan registradas en la base de datos pendiendo del dia y categoria del evento\r\n            const idHorasDisponibles = eventos.map(evento => evento.id);\r\n            const listadoHoras = document.querySelectorAll('#horas LI');\r\n            // FILTER sirve para obtener ciertos valores en un arreglo, dado que este no es un arreglo debemos hacer lo siguiente\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n\r\n            // obtener y habilitar solo las horas que no estan ocupadas para esta categoria y dia del evento\r\n            const HabilitarHorasId = listadoHorasArray.filter( hora => !idHorasDisponibles.includes(hora.dataset.horaId));\r\n            HabilitarHorasId.forEach( habilitarLI => habilitarLI.classList.remove('horas__hora--desabilitado') );\r\n\r\n            const horasDisponibles = document.querySelectorAll('#horas LI:not(.horas__hora--desabilitado)'); //el evento no aplica para los LI desabilitados\r\n            horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(e){\r\n            //borrar si existe una seleccionada, ya que solo puede seleccionar una\r\n            const seleccionada = document.querySelector('.horas__hora--seleccionado');\r\n            if(seleccionada) seleccionada.classList.remove('horas__hora--seleccionado');\r\n\r\n            // mostrar seleccionado\r\n            const li = e.target;\r\n            li.classList.add('horas__hora--seleccionado');\r\n            // console.log(e.target.dataset.horaId); id del registro\r\n            inputHiddenHoras.value = li.dataset.horaId;\r\n        }\r\n    }\r\n})();","(function(){\r\n    const tagInput = document.querySelector('#tags_input');\r\n    if(tagInput){\r\n        const divTags = document.querySelector('#tags');\r\n        const inputHiddenTags = document.querySelector('[name=\"tags\"]');\r\n        //para no resetear los valores cuando envia datos\r\n        const valoresTemporales = inputHiddenTags.value === '' ? [] : inputHiddenTags.value.split(',');\r\n        let tags = valoresTemporales;\r\n        mostrarTags();\r\n\r\n        tagInput.addEventListener('keypress', guardarTag)\r\n        function guardarTag(e){\r\n            //keycode lee el valor ingresado en el teclado 13 es la tecla enter y 44 la coma\r\n            if(e.keyCode === 13 || e.keyCode === 44){\r\n                //prevenimos que el usuario envie el formualrio o que ingrese un valor\r\n                e.preventDefault();\r\n                //si el input esta vacio nos salimos de la funcion\r\n                if(e.target.value.trim() === '' || e.target.value < 1) return;\r\n\r\n                //el arrelo tiene una copia del arreglo actual y almacena el valor del input\r\n                tags = [...tags, e.target.value.trim()];\r\n\r\n                tagInput.value = '';\r\n                mostrarTags();\r\n                actulaizarInputHidden();\r\n            }\r\n        }\r\n\r\n        function mostrarTags(){\r\n            divTags.textContent = '';\r\n            tags.forEach(tag => {\r\n                const listado = document.createElement('LI');\r\n                listado.classList.add('formulario__tag');\r\n                listado.textContent = 'x';\r\n                listado.onclick = eliminarTag;\r\n                const nombre = document.createElement('SPAN');\r\n                nombre.textContent = tag;\r\n                listado.appendChild(nombre);\r\n                divTags.appendChild(listado);\r\n            })\r\n        }\r\n\r\n        function actulaizarInputHidden(){\r\n            //convertimos el arrglo en un string\r\n            inputHiddenTags.value = tags.toString();\r\n        }\r\n\r\n        function eliminarTag(e){\r\n            //eliminamos el elemento que targete el evento e en escaso es LI\r\n            e.target.remove();\r\n            //con filter, obtenemos los valores del arreglo que sean diferentes de el que targetemos\r\n            tags = tags.filter(tag => tag !== e.target.lastChild.textContent);\r\n            actulaizarInputHidden();\r\n            mostrarTags();\r\n        }\r\n    }\r\n})()"]}