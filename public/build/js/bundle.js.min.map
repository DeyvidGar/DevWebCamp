{"version":3,"sources":["app.js","horas.js","ponentes.js","tags.js"],"names":["alerta","document","querySelector","setTimeout","remove","dias","querySelectorAll","categoria","inputHiddenDias","inputHiddenHoras","idHorasEditar","value","categoriaEditar","diasEditar","addEventListener","llenarBusqueda","forEach","dia","busqueda","categoria_id","dia_id","seleccionarSeleccionEditando","horaSeleccionada","classList","add","e","target","name","parseInt","seleccionada","Object","values","includes","buscarEventos","async","url","resultadoConexion","fetch","eventos","listadoHoras","hora","removeEventListener","seleccionarHora","idHorasDisponibles","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","habilitarLI","obtenerHorasDisponibles","json","li","ponentesInput","ponentes","ponentesFiltrando","listadoPonentes","ponenteHidden","formatearPonentes","arrayPonentes","ponente","nombre","trim","apellido","id","limpiarPonentes","firstChild","removeChild","seleccionarPonente","ponenteSeleccionado","ponenteId","obtenerPonentes","input","length","exprecion","RegExp","toLowerCase","search","ponenteLI","createElement","textContent","onclick","appendChild","noPonentes","mostrarPonentes","tagInput","divTags","inputHiddenTags","tags","split","mostrarTags","tag","listado","eliminarTag","actulaizarInputHidden","toString","lastChild","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){\r\n    const alerta = document.querySelector('.alerta');\r\n    if(alerta){\r\n        setTimeout(() => {\r\n            alerta.remove();\r\n        }, 3000);\r\n    }\r\n})();","(function(){\r\n    const horas = document.querySelector('#horas');\r\n    if(horas){\r\n        const dias = document.querySelectorAll('[name=\"dia_id\"]');\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        const inputHiddenDias = document.querySelector('#dia_id');\r\n        const inputHiddenHoras = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        //seleccionar la hora del registro\r\n        const idHorasEditar = inputHiddenHoras.value;\r\n        const categoriaEditar = categoria.value;\r\n        const diasEditar = document.querySelector('[name=\"dia_id\"]:checked') ? +document.querySelector('[name=\"dia_id\"]:checked').value : '';\r\n\r\n        categoria.addEventListener('change', llenarBusqueda);\r\n        dias.forEach(dia => dia.addEventListener('change', llenarBusqueda));\r\n\r\n        //crear objeto en memoria para almacenar los objetos que queremos hacer interactivos\r\n        let busqueda = {\r\n            //el nombre debe ser el mismo que esta en el name del formulario\r\n            categoria_id: +categoria.value || '', // (+) convierte a numero / (||) es un placeholder\r\n            dia_id: document.querySelector('[name=\"dia_id\"]:checked') ? +document.querySelector('[name=\"dia_id\"]:checked').value : ''\r\n        }\r\n\r\n        // en caso de que el objeto contenga valores debemos de mostrar los horarios diponibles\r\n        if(!Object.values(busqueda).includes('')){\r\n            // POR QUE ASYNC: la funcion buscarEventos esta ejecutando las lineas donde pone la clase de desabilitado mientras nosotros la queremos quitar en la hora que pertenece a nuestro evento\r\n            //con await esperamos a que termite de ejecutar la funcion de buscarEvento y funciones que se unen a esa para despues ejecutar las siguientes lineas\r\n            (async () => {\r\n                await buscarEventos();\r\n\r\n                seleccionarSeleccionEditando();\r\n            })();\r\n        }\r\n\r\n        function seleccionarSeleccionEditando(){\r\n            if(busqueda.categoria_id == categoriaEditar && busqueda.dia_id == diasEditar){\r\n                const horaSeleccionada = document.querySelector(`[data-hora-id=\"${idHorasEditar}\"]`);\r\n                horaSeleccionada.classList.remove('horas__hora--desabilitado');\r\n                horaSeleccionada.classList.add('horas__hora--seleccionado');\r\n                // horaSeleccionada.onclick = seleccionarHora;\r\n            }\r\n        }\r\n\r\n        function llenarBusqueda(e){\r\n            busqueda[e.target.name] = parseInt(e.target.value);\r\n\r\n            // para que se actualizen los campos con cada cambio en el campo check y select debemos: reiniciar campos ocultos y borrar el campo seleccionado\r\n            // Reiniciar los campos ocultos\r\n            inputHiddenDias.value = '';\r\n            inputHiddenHoras.value = '';\r\n             //borrar si existe una seleccionada, ya que solo puede seleccionar una\r\n             const seleccionada = document.querySelector('.horas__hora--seleccionado');\r\n             if(seleccionada) seleccionada.classList.remove('horas__hora--seleccionado');\r\n\r\n            // con Object.values obtenemos un arreglo con solo los valores del objeto, includes obtiene si alguno esta vacio\r\n            if(Object.values(busqueda).includes('')) return;\r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos() {\r\n            const { dia_id, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia_id}&categoria_id=${categoria_id}`;\r\n\r\n            const resultadoConexion = await fetch(url);\r\n            const eventos = await resultadoConexion.json();//eventos disponibles dependiendo los valores del objeto de busqueda\r\n\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            //reiniciar las horas, desabilitamos todas las horas para posteriormente quitarle a las disponibles\r\n            const listadoHoras = document.querySelectorAll('#horas LI');\r\n            listadoHoras.forEach( hora => {\r\n                hora.classList.add('horas__hora--desabilitado');\r\n                hora.removeEventListener('click', seleccionarHora);\r\n                }\r\n            );\r\n\r\n            seleccionarSeleccionEditando();\r\n\r\n            // obtener solo las horas que ya estan registradas en la base de datos pendiendo del dia y categoria del evento\r\n            const idHorasDisponibles = eventos.map(evento => evento.hora_id);\r\n            // FILTER sirve para obtener ciertos valores en un arreglo, dado que este no es un arreglo debemos hacer lo siguiente\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n\r\n            // obtener y habilitar solo las horas que no estan ocupadas para esta categoria y dia del evento\r\n            const habilitarHorasId = listadoHorasArray.filter( hora => !idHorasDisponibles.includes(hora.dataset.horaId));\r\n            habilitarHorasId.forEach( habilitarLI => habilitarLI.classList.remove('horas__hora--desabilitado') );\r\n\r\n            const horasDisponibles = document.querySelectorAll('#horas LI:not(.horas__hora--desabilitado)'); //el evento no aplica para los LI desabilitados\r\n            horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora) );\r\n\r\n        }\r\n\r\n        function seleccionarHora(e){\r\n            //borrar si existe una seleccionada, ya que solo puede seleccionar una\r\n            const seleccionada = document.querySelector('.horas__hora--seleccionado');\r\n            if(seleccionada) seleccionada.classList.remove('horas__hora--seleccionado');\r\n\r\n            // mostrar seleccionado\r\n            const li = e.target;\r\n            li.classList.add('horas__hora--seleccionado');\r\n            // console.log(e.target.dataset.horaId); id del registro\r\n            inputHiddenHoras.value = li.dataset.horaId;\r\n            inputHiddenDias.value = document.querySelector('[name=\"dia_id\"]:checked').value;\r\n        }\r\n    }\r\n})();","(function(){\r\n    const ponentesInput = document.querySelector('#ponente');\r\n    if(ponentesInput){\r\n        let ponentes = [];\r\n        let ponentesFiltrando = [];\r\n\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n        obtenerPonentes();\r\n        ponentesInput.addEventListener('input', leerInput);\r\n\r\n        async function obtenerPonentes(){\r\n            const url = `/api/ponentes`;\r\n            const resultadoConexion = await fetch(url);\r\n            const ponentes = await resultadoConexion.json();\r\n\r\n            formatearPonentes(ponentes);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []){\r\n            ponentes = arrayPonentes.map( ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            })\r\n        }\r\n\r\n        function leerInput(e) {\r\n            const input = e.target.value;\r\n            if(input.length > 3) {\r\n                // esta exprecion regula busca un patron y con la flag \"i\" le decimos que busque sin importar mayusculas o minusculas\r\n                // la exprecion con le metodo .search() retorna 0 si encuentra la similitud en caso contrario el valor da -1\r\n                const exprecion = new RegExp(input, \"i\");\r\n                ponentesFiltrando = ponentes.filter( ponente => {\r\n                    //filtramos por cada ponenete, si el nombre del ponente con la funcion de exprecion regular da un valor diferente a -1 es decir 0 signidica que encontro las coincidencias por lo tanto lo almacena en el arreglo\r\n                    if(ponente.nombre.toLowerCase().search(exprecion) != -1)\r\n                        return ponente\r\n                });\r\n\r\n                mostrarPonentes();\r\n            } else {\r\n                ponentesFiltrando = [];\r\n                limpiarPonentes();\r\n            }\r\n        }\r\n\r\n        function mostrarPonentes(){\r\n            limpiarPonentes();\r\n            if(ponentesFiltrando.length > 0){\r\n                ponentesFiltrando.forEach( ponente => {\r\n                    const ponenteLI = document.createElement('LI');\r\n                    ponenteLI.classList.add('listado-ponentes__ponente');\r\n                    ponenteLI.textContent = ponente.nombre;\r\n                    ponenteLI.dataset.ponenteId = ponente.id;\r\n                    ponenteLI.onclick = seleccionarPonente;\r\n                    listadoPonentes.appendChild(ponenteLI);\r\n                });\r\n            } else {\r\n                const noPonentes = document.createElement('P');\r\n                noPonentes.classList.add('listado-ponentes__no-ponentes');\r\n                noPonentes.textContent = 'No se encontro ponente.';\r\n                listadoPonentes.appendChild(noPonentes);\r\n            }\r\n        }\r\n\r\n        function limpiarPonentes(){\r\n            while(listadoPonentes.firstChild){\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }\r\n        }\r\n\r\n        function seleccionarPonente(e){\r\n            const ponente = e.target;\r\n            //remover clase si existe\r\n            const ponenteSeleccionado = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            if(ponenteSeleccionado) ponenteSeleccionado.classList.remove('listado-ponentes__ponente--seleccionado');\r\n\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();","(function(){\r\n    const tagInput = document.querySelector('#tags_input');\r\n    if(tagInput){\r\n        const divTags = document.querySelector('#tags');\r\n        const inputHiddenTags = document.querySelector('[name=\"tags\"]');\r\n        //para no resetear los valores cuando envia datos\r\n        const valoresTemporales = inputHiddenTags.value === '' ? [] : inputHiddenTags.value.split(',');\r\n        let tags = valoresTemporales;\r\n        mostrarTags();\r\n\r\n        tagInput.addEventListener('keypress', guardarTag)\r\n        function guardarTag(e){\r\n            //keycode lee el valor ingresado en el teclado 13 es la tecla enter y 44 la coma\r\n            if(e.keyCode === 13 || e.keyCode === 44){\r\n                //prevenimos que el usuario envie el formualrio o que ingrese un valor\r\n                e.preventDefault();\r\n                //si el input esta vacio nos salimos de la funcion\r\n                if(e.target.value.trim() === '' || e.target.value < 1) return;\r\n\r\n                //el arrelo tiene una copia del arreglo actual y almacena el valor del input\r\n                tags = [...tags, e.target.value.trim()];\r\n\r\n                tagInput.value = '';\r\n                mostrarTags();\r\n                actulaizarInputHidden();\r\n            }\r\n        }\r\n\r\n        function mostrarTags(){\r\n            divTags.textContent = '';\r\n            tags.forEach(tag => {\r\n                const listado = document.createElement('LI');\r\n                listado.classList.add('formulario__tag');\r\n                listado.textContent = 'x';\r\n                listado.onclick = eliminarTag;\r\n                const nombre = document.createElement('SPAN');\r\n                nombre.textContent = tag;\r\n                listado.appendChild(nombre);\r\n                divTags.appendChild(listado);\r\n            })\r\n        }\r\n\r\n        function actulaizarInputHidden(){\r\n            //convertimos el arrglo en un string\r\n            inputHiddenTags.value = tags.toString();\r\n        }\r\n\r\n        function eliminarTag(e){\r\n            //eliminamos el elemento que targete el evento e en escaso es LI\r\n            e.target.remove();\r\n            //con filter, obtenemos los valores del arreglo que sean diferentes de el que targetemos\r\n            tags = tags.filter(tag => tag !== e.target.lastChild.textContent);\r\n            actulaizarInputHidden();\r\n            mostrarTags();\r\n        }\r\n    }\r\n})()"]}